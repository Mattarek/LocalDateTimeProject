package current_2025_czerwiec.Compare.project10;

import java.time.LocalDate;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;

public class Main {
	//	ğŸ“Œ Opis:
	//	Masz klasÄ™ Candidate, ktÃ³ra reprezentuje kandydatÃ³w do pracy. KaÅ¼dy kandydat ma:
	//	String name
	//	Optional<LocalDate> interviewDate
	//	int score (ocena za zadanie rekrutacyjne)
	//	Zadaniem jest posortowaÄ‡ kandydatÃ³w wedÅ‚ug nastÄ™pujÄ…cych zasad:
	//	Najpierw ci, ktÃ³rzy majÄ… zaplanowanÄ… rozmowÄ™ kwalifikacyjnÄ… (interviewDate.isPresent()).
	//	WÅ›rÃ³d nich â€” wczeÅ›niejsze daty rozmÃ³w majÄ… wyÅ¼szy priorytet.
	//	Kandydaci bez rozmowy sÄ… sortowani malejÄ…co po score.

	public static void main(final String[] args) {
		final List<Candidate> candidates = List.of(
				new Candidate("Anna", Optional.of(LocalDate.of(2025, 05, 10)), 85),
				new Candidate("Tomek", Optional.empty(), 92),
				new Candidate("Zosia", Optional.of(LocalDate.of(2025, 05, 10)), 85),
				new Candidate("Bartek", Optional.empty(), 85),
				new Candidate("Kasia", Optional.of(LocalDate.of(2025, 05, 10)), 85)
		);

		final Comparator<Candidate> comparator = Comparator
				// 1. Najpierw porÃ³wnujemy po obecnoÅ›ci daty rozmowy kwalifikacyjnej
				//    -> jeÅ›li interviewDate jest obecne => przypisz 0, nie zmieniaj kolejnosci
				//    -> jeÅ›li brak daty => przypisz 1 zamieÅ„ kolejnoÅ›ciÄ…, dziÄ™ki temu, na poczÄ…tku mamy tych, ktÃ³rzy
				//    majÄ… umÃ³wionÄ… juÅ¼ datÄ™ rozmowy, a ci ktÃ³rzy nie maja idÄ… na dÃ³l listy
				.comparing((Candidate c) -> c.getInterviewDate().isPresent() ? 0 : 1)

				// 2. W przypadku, gdy oboje kandydaci majÄ… datÄ™, porÃ³wnujemy je rosnÄ…co
				//    -> wczeÅ›niejsza data = wyÅ¼szy priorytet
				//    -> jeÅ›li interviewDate brak, uÅ¼yj LocalDate.MAX (czyli bardzo daleka przyszÅ‚oÅ›Ä‡)
				.thenComparing(c -> c.getInterviewDate().orElse(LocalDate.MAX))

				// 3. Gdy daty rozmÃ³w sÄ… takie same (lub oba ich nie majÄ…), sortuj po score rosnÄ…co
				//    -> UWAGA: score rosnÄ…co = niÅ¼szy wynik wyÅ¼ej. JeÅ›li chcesz malejÄ…co, uÅ¼yj: -c.getScore()
				.thenComparing(Candidate::getScore);

		candidates.stream()               // Tworzymy strumieÅ„ kandydatÃ³w
				.sorted(comparator)      // Sortujemy ich zgodnie z powyÅ¼szym wielokryterialnym komparatorem
				.forEach(System.out::println); // Wypisujemy kaÅ¼dy obiekt po sortowaniu
	}
}
