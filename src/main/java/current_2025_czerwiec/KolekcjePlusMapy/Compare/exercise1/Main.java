package current_2025_czerwiec.KolekcjePlusMapy.Compare.exercise1;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class Main {
	public static void main(final String[] args) {
		final List<Employee> employees = Arrays.asList(
				new Employee("Marcin", "Barƒá", 28, BigDecimal.valueOf(8000)),
				new Employee("Patryk", "Barƒá", 28, BigDecimal.valueOf(6000)),
				new Employee("Sylwia", "Barƒá", 32, BigDecimal.valueOf(5000)),
				new Employee("Kamil", "Barƒá", 30, BigDecimal.valueOf(6000)),
				new Employee("≈Åukasz", "Abarƒá", 32, BigDecimal.valueOf(5000)),
				new Employee("Adrian", "Barƒá", 32, BigDecimal.valueOf(3000)),
				new Employee("Czes≈Çaw", "Barƒá", 52, BigDecimal.valueOf(6500)),
				new Employee("Jolanta", "Barƒá", 52, BigDecimal.valueOf(6800)),
				new Employee("Stanis≈Çaw", "Barƒá", 59, BigDecimal.valueOf(4000)),
				new Employee("Gra≈ºyna", "Barƒá", 60, BigDecimal.valueOf(4500))
		);

		System.out.println("== Sortowanie wed≈Çug compareTo (naturalny porzƒÖdek) ==");

		// Metoda sorted() wywo≈Çana bez argumentu: employees.stream().sorted()
		// korzysta z metody compareTo(), poniewa≈º wymaga, by elementy implementowa≈Çy interfejs Comparable<T>.

		//		üìå Co to oznacza?
		//				Obiekty klasy Employee muszƒÖ implementowaƒá Comparable<Employee>
		//		Wtedy Stream.sorted() wie, jak por√≥wnaƒá dwa obiekty Employee
		//		U≈ºywa dok≈Çadnie tej implementacji:
		//		@Override
		//		public int compareTo(Employee other) {
		//			// ...
		//		}

		//		üß† Podsumowanie:
		//			| Wywo≈Çanie                            | Dzia≈Çanie                             |
		//			| ------------------------------------ | ------------------------------------- |
		//			| `stream().sorted()`                  | U≈ºywa `compareTo()` z `Comparable<T>` |
		//			| `stream().sorted(comparator)`        | U≈ºywa przekazanego `Comparator<T>`    |
		//			| `Collections.sort(list)`             | U≈ºywa `compareTo()`                   |
		//			| `Collections.sort(list, comparator)` | U≈ºywa przekazanego `Comparator<T>`    |

		employees.stream().sorted().forEach(System.out::println);

		System.out.println("======================================================");

		// Spos√≥b nr.1 inline
		final Comparator<Employee> nameReversedComparatorExample1 = Comparator
				.comparing(Employee::getName)
				.thenComparing(Employee::getLastName)
				.thenComparing(Employee::getAge)
				.thenComparing(Employee::getSalary);

		Collections.sort(employees, nameReversedComparatorExample1);
		System.out.println(employees);

		// Spos√≥b nr.2 by variable
		final Comparator<Employee> nameReversedComparator = Comparator.comparing(Employee::getName);
		final Comparator<Employee> lastnameReversedComparator = Comparator.comparing(Employee::getLastName);
		final Comparator<Employee> ageReversedComparator = Comparator.comparing(Employee::getAge);
		final Comparator<Employee> salaryReversedComparator = Comparator.comparing(Employee::getSalary);

		final Comparator<Employee> secondComparator = nameReversedComparator
				.thenComparing(lastnameReversedComparator)
				.thenComparing(ageReversedComparator)
				.thenComparing(salaryReversedComparator);

		System.out.println(secondComparator);

		System.out.println("======================================================");
		System.out.println("\n== Comparator: imiƒô ‚Üì, nazwisko ‚Üì, wiek ‚Üë, wyp≈Çata ‚Üë ==");
		employees.stream()
				.sorted(
						Comparator.comparing(Employee::getName, Comparator.reverseOrder())
								.thenComparing(Employee::getLastName, Comparator.reverseOrder())
								.thenComparingInt(Employee::getAge)
								.thenComparing(Employee::getSalary)
				)
				.forEach(System.out::println);

		System.out.println("\n== Comparator: odwr√≥cenie poprzedniego ==");
		employees.stream()
				.sorted(
						Comparator.comparing(Employee::getName, Comparator.reverseOrder())
								.thenComparing(Employee::getLastName, Comparator.reverseOrder())
								.thenComparingInt(Employee::getAge)
								.thenComparing(Employee::getSalary)
								.reversed()
				)
				.forEach(System.out::println);
	}
}
